#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n;//수의 개수
int a[12];//수 
vector<int> op;//각연산자의 갯수 op[0]=덧셈의갯수 op[1]뺄셈 op[2]곱셈 op[3]나눗셈
vector<int> op_result;
int check[11];
vector<int> results;
int result;


void DFS(int node,int cnt){
    if(cnt==n-1){ //연산자 순열 완성
        result=a[0];
        for(int i=0;i<n-1;i++){
            if(op_result[i]==0){
                result+=a[i+1];
            }else if(op_result[i]==1){
                result-=a[i+1];
            }else if(op_result[i]==2){
                result*=a[i+1];
            }else if(op_result[i]==3){
                result/=a[i+1];
            }
        }
        results.push_back(result);
        return;
    }
    for(int i=0;i<n-1;i++){
        if(check[i]==true){
            continue;
        }
        check[i]=true;
        op_result.push_back(op[i]);
        DFS(i,cnt+1);
        op_result.pop_back();
        check[i]=false;
    }
}

int main()
{
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    
    
    int x[4];
    for(int i=0;i<4;i++){
        cin>>x[i];
    }
    for(int i=0;i<4;i++){
        for(int j=0;j<x[i];j++){
            op.push_back(i); //연산자 배열에 풀어서 집어넣음
        }
    }
    
    for(int i=0;i<n-1;i++){
        check[i]=true;
         op_result.push_back(op[i]);
        DFS(i,1);
        check[i]=false;
         op_result.pop_back();
    }
    
    cout<<* max_element(results.begin(),results.end())<<endl<<* min_element(results.begin(),results.end());

    return 0;
}
